@page
@model BrPo.Website.Areas.ShoppingBasket.Pages.CheckoutModel

<style>
    #submit span,
    #submit {
        font-size: 1.2em !important;
        min-height: 45px
    }
    #submit {
        display: none;
    }
    .hidden {
        display: none;
    }
</style>

<div class="row">
    <h2>Checkout:   £ <span>@Model.Invoice?.Total</span></h2>
</div>

<div class="row mt-3">
    <div class="col p-0">
        <!-- Display a payment form -->
        <form id="payment-form" class="">
            @{
                var invoiceId = Model.Invoice?.Id ?? 0;
                <input type="hidden" id="invoiceId" value="@invoiceId" />
            }
            <input type="hidden" id="userId" value="@Model.ApplicationUser.Id.ToString()" />
            <input type="hidden" id="amount" value="@Model.Invoice?.Total" />
            <div id="payment-element">
                <!--Stripe.js injects the Payment Element-->
            </div>
            <button class="btn btn-primary mt-4 w-100" id="submit">
                <span id="button-text">Pay Now</span>
            </button>
            <h6 id="payment-message" class="hidden mt-3 alert alert-danger"></h6>
        </form>
    </div>
</div>

@await Html.PartialAsync("_LoaderModalPartial")

<script src="https://js.stripe.com/v3/"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        showLoader();

        const stripe = Stripe("pk_test_51IeKs3EaMfIKPinexA919ZVkyv3VPJkkg7CVT1s7WcB33jbJzwkD3SF3t1YKndTKNep4MS6h6epMEZSCrNC8UkNU00VsZQXPsz");
        let elements, cs;

        document
            .querySelector("#payment-form")
            .addEventListener("submit", handleSubmit);

        // Fetches a payment intent and captures the client secret
        async function createPaymentIntent() {
            const userId = $("#userId").val();
            const invoiceId = $("#invoiceId").val();
            if (invoiceId === 0) {
                alert ("No Invoice Id supplied!")
                return;
            }            
            if (userId === "") {
                alert ("No User Id supplied!")
                return;
            }
            const invoiceTotal = $("#amount").val();
            if (invoiceTotal == undefined) invoiceTotal = 0;
            if (invoiceTotal === 0) {
                alert ("No Invoice Total supplied!")
                return;
            }            
            const body = JSON.stringify({ 
                'amount': parseInt(parseFloat(invoiceTotal) * 100),
                'invoiceid': parseInt(invoiceId),
                'userid': userId.replace('"', '')
            });
            const response = await fetch("/api/PaymentIntent", {
                method: "POST",
                headers: { 
                    "Content-Type": "application/json",
                    "X-CSRF-TOKEN": $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                body: body
            });
            if (response.ok){
                const { clientSecret } = await response.json();
                const appearance = {
                    theme: 'stripe',
                };
                cs = clientSecret;
                elements = stripe.elements({ appearance, clientSecret });
                const paymentElement = elements.create("payment");
                paymentElement.on('change' , function(event) {
                    inputs = $("input[aria-invalid=true]");
                    if (inputs.length == 0) {
                        clearMessage();
                    }
                });
                paymentElement.mount("#payment-element");
                setTimeout(function(){
                    showLoader(false);
                    $("#submit").show();
                }, 3000);
            } else {
                setMessage("Incorrect amount submitted for payment");
                setTimeout(function(){
                    showLoader(false);
                }, 500);
            }
        }

        async function handleSubmit(e) {
            e.preventDefault();
            showLoader();
            clearMessage();
            const { error } = await stripe.confirmPayment({
                elements,
                confirmParams: {
                    return_url: "https://localhost:44397/ShoppingBasket/Success?payment_intent_client_secret=" + cs,
                },
            });
            // This point will only be reached if there is an immediate error when
            // confirming the payment. 
            if (error.type === "card_error" || error.type === "validation_error") {
                setMessage(error.message);
            } else {
                setMessage(`An unexpected error occurred: ${error.message}`);
            }
            showLoader(false);
            setTimeout(function(){
                showLoader(false);
            }, 500);
        }

        // UI helpers

        function setMessage(messageText) {
            const messageContainer = document.querySelector("#payment-message");
            messageContainer.classList.remove("hidden");
            messageContainer.textContent = messageText;
        }

        function clearMessage(){
            const messageContainer = document.querySelector("#payment-message");
            messageContainer.classList.add("hidden");
            messageContainer.textContent = "";
        }

        // Initialisation

        createPaymentIntent();
    });
</script>