@using BrPo.Website.Services.Image.Models;
@using BrPo.Website.Services.Image.Services
@using BrPo.Website.Areas.Pictures.Pages
@using System.Text
@inject IImageService ImageService;

@model IList<ImageGallery>
@{
    var x = 1;
}
@(Html
    .Grid(Model)
    .Build(columns =>
    {          
        columns.Add(model => model.CoverImageId)
            .Titled("Cover image")
            .Encoded(false)
            .RenderedAs(model =>
            {
                if (model.CoverImageId == 0) return "No content";
                var base64 = ImageService.GetBase64ThumbnailAsync(model.CoverImageId, 80).Result;
                var name = ImageService.GetGalleryItemName(model.CoverImageId);
                return HtmlHelpers.GetGalleryImageTag(base64, name);
            });
        columns.Add(model => model.Name)
            .Titled("Name")
            .Sortable(true)
            .Encoded(false)
            .Filterable(true)
            .RenderedAs(model =>
            {
                return HtmlHelpers.GetGalleryNameTags(model);
            });
        columns.Add(model => model.Description)
            .Titled("Description")
            .Encoded(false)
            .RenderedAs(model =>
            {
                return HtmlHelpers.GetDescription(model.Description);
            })
            .Css("d-none d-sm-table-cell");
        columns.Add(model => model.DateUpdated)
            .Titled("Updated")
            .Formatted("{0:d}")
            .Css("d-none d-md-table-cell");
        columns.Add(model => model.ContentCount)
            .Titled("Content")
            .Sortable(true)
            .Css("d-none d-lg-table-cell");
        columns.Add().Titled("Active")
            .Encoded(false)
            .Css("d-none d-md-table-cell")
            .RenderedAs(model =>
            {
                return HtmlHelpers.GetIsGalleryActiveTag(model.IsActive);
            });
        columns.Add(model => model.Id)
            .Titled("")
            .Encoded(false)
            .RenderedAs(model =>
            {
                return HtmlHelpers.GetGalleryButtons(model.Id);
            })
            .Css("actions-column");
    })
    .UsingUrl("MyGalleries?handler=Grid")
    .Empty("No galleries found")
    .Pageable(pager =>
    {
        pager.PagesToDisplay = 5;
        pager.RowsPerPage = 5;
    })
    .Css("table")
    .Attributed(new { data_type = "galleries" })
    .Id("gallery-grid")
)
