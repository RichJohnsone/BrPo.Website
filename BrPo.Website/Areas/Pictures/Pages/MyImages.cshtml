@page
@model BrPo.Website.Areas.Pictures.Pages.MyImagesModel
@using BrPo.Website.Services.Image.Services
@inject IImageService ImageService;
@{
    var gridStyle = "display: none !important;";
    var sliderStyle = "";
    if (Model.DisplayAsGrid)
    {
        gridStyle = "";
        sliderStyle = "display: none !important;";
    }
}
<style>
    .thumbnail{
        max-height: 100px !important;
    }
    .table-sm{
        font-size: 0.8em !important;
    }
    th, td {
        /*padding: 0.1rem 0.3rem 0 0 !important;*/ 
    }
    div.card-header a:hover,
    div.card-header a,
    a.collapsed:hover,
    a.collapsed { text-decoration: none; }
    .headerLabel {
        color: #212529;
        margin-left: 5px;
    }
    .table-button {
        width: 100%;
    }
    .grid-column {
        border: 0;
        border-bottom: 1px solid #dee2e6;
        padding-bottom: 10px;
        margin-bottom: 10px;
    }
    #paper-selectors-table{
        margin-top: -13px;
    }
    #gallery-items-grid {
        width: 100%;
    }
    .table {
        margin-bottom: 0;
    }

</style>

@section Head { <link href="~/css/mvc-grid/mvc-grid.css" rel="stylesheet"> }

<div class="container p-0">
    <div class="row d-inline-block w-100 mb-3 ml-1">
        <div class="col-12 p-0 mx-auto">
            <h1 class="d-inline">My Images</h1>
            <button class="btn-icon btn-info d-inline ml-1" id="set-view-grid" data-toggle="tooltip" title="Switch to grid view" style="@sliderStyle">
                <i class="fas fa-grip-horizontal"></i>
            </button>
            <button class="btn-icon btn-info d-inline ml-2" id="set-view-slider" data-toggle="tooltip" title="Switch to slider view" style="@gridStyle">
                <i class="fas fa-arrows-alt-h"></i>
            </button>
        </div>
    </div>

    <div class="row m-0 mb-3">
    @if (string.IsNullOrEmpty(Model.GalleryRootName)){
        <div class="col-12 pl-0 pr-0">
            <div class="form-group row">
                <div class="mt-3 alert alert-info alert-dismissible fade show w-100 mb-0 ml-3 mr-3" style="margin-top: 0!important;">
                    <i id="alert-icon" class="fas fa-info-circle"></i>
                    <span id="alert-message">You need to Add some user details to your account. Please go to the link below and be sure to add a gallery root name.</span>
                    <button type="button" class="close alert-close-js" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </div>
            <div class="form-group row">
                <div class="ml-3">
                    <p>The gallery root name is required if you want to add items for sale.</p>
                    <p>Your galleries and gallery items will be publicly accessible at <span>https://BrixtonPhotographic.com/YourGalleryRootName</span>.</p>
                    <a asp-area="Identity" asp-page="Account/Manage/EditUserDetails">Edit user details</a>
                </div>
            </div>
        </div>
    } else {
        if (Model?.ImageGalleryItems != null && Model.ImageGalleryItems.Count > 0)
        {
        <div class="overlay-container">
            <div id="gallery-items-grid-container" class="col-12 d-flex justify-content-center flex-nowrap mx-auto p-0" style="@gridStyle"></div>
            <div class="grid-loading">
                <div class="grid-loading-text">
                    Grid loading
                </div>
            </div>
        </div>
        <div id="gallery-items-image-scroller-container" class="w-100 d-flex justify-content-center flex-nowrap" style="@sliderStyle"></div>
        } else {
        <div class="form-group row">
            <div class="mt-3 alert alert-info alert-dismissible fade show w-100 mb-0 ml-3 mr-3" style="margin-top: 0!important;">
                <i id="alert-icon" class="fas fa-info-circle"></i>
                <span id="alert-message">You need to upload some files before you can add them to a gallery</span>
                <button type="button" class="close alert-close-js" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>
        }
    }
    </div>

    <div class="form-group row m-0 mb-2 d-flex justify-content-center flex-nowrap">
        <div class="col-12 p-0" id="editPanel">
            <div>
                <p>Your images are shown above.</p>
                <p>You can add your images to public galleries here.</p>
                <p>Images in galleries can be available for sale - you set the available sizes and prices.</p>
                <p>To do this we capture some extra data about your image - we call this making it into a gallery item.</p>
                <p>Use the action buttons above to:</p>
                <ul>
                    <li>Make a file into a gallery item</li>
                    <ul>
                        <li>The gallery item can be added to one or more galleries</li>
                        <li>You can add tags to the gallery item</li>
                    </ul>
                    <li>Edit a file's gallery item data</li>
                    <li>Remove a file's gallery item data</li>
                    <ul>
                        <li>Also removes associated tags and gallery entries</li>
                    </ul>
                </ul>
            </div>
        </div>
    </div>
</div>

@if (Model?.ImageGalleryItems != null && Model.ImageGalleryItems.Count > 0)
{
@*    
    selects used to clone into the edit gallery item ajax form
*@
    @Html.DropDownListFor(
        m => Model.ImageGalleryId, 
        new SelectList(Model.ImageGalleries, "Id", "Name"), 
        htmlAttributes: new { 
            @class = "form-control d-none", 
            id = "SelectedGallery", 
            title="Select a gallery", 
            data_toggle="tooltip" });
    @Html.HiddenFor(m => Model.ImageGalleryId, new { name = "ImageGalleryId", id = "Model.ImageGalleryId"});

    <div class="form-group row d-none mb-0 mt-2 p-3" id="paper-selectors">
        <table class="form-table" id="paper-selectors-table">
            <tr>
                <td>
                    <label>
                        Paper preference<i class="fas fa-question-circle"
                            title="Paper preference"
                            data-toggle="hover" 
                            data-html="true"
                            data-content="<p>You can select paper preferences for prints of your images.</p><p>We make buyers aware of your preferences but it is up to them to make the final choice.<p>"></i>
                    </label>
                </td>
                <td>
                    <select class="form-control" 
                        id="SelectedPaperSurface" 
                        data-toggle="tooltip" 
                        title="Optional - select a preferred paper surface for your prints" 
                        name="SelectedPaperSurfaceId">
                        @foreach (var paperSurface in Model.PaperSurfaces)
                        {
                            if (paperSurface.IsAvailable)
                            {
                                <option value="@paperSurface.Id">@paperSurface.Name</option>
                            }
                            else
                            {
                                <option value="@paperSurface.Id" disabled="disabled">@paperSurface.Name</option>
                            }
                        }
                    </select>
                </td>
                <td>
                    <select class="form-control" 
                        id="SelectedPaperTexture" 
                        data-toggle="tooltip" 
                        title="Optional - select a preferred paper texture for your prints" 
                        name="SelectedPaperTextureId">
                        @foreach (var paperTexture in Model.PaperTextures)
                        {
                            if (paperTexture.IsAvailable)
                            {
                                <option value="@paperTexture.Id">@paperTexture.Name</option>
                            }
                            else
                            {
                                <option value="@paperTexture.Id" disabled="disabled">@paperTexture.Name</option>
                            }
                        }
                    </select>
                </td>
            </tr>
        </table>
    </div>
}

<!--
    Modals
-->

<div class="modal fade" id="confirmModal" tabindex="-1" role="dialog" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content p-3">
            <div class="modal-header">
                <h2 class="text-danger">
                    <i class="fas fa-exclamation"></i>
                    <span>Warning</span>
                </h2>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <p>This will remove the gallery item data from your image.</p>
                    <p>It will also remove any associated tags.</p>
                    <p>The image is removed from all galleries.</p>
                    <p>Your image file will remain on our servers for 90 days.</p>
                    <h4>This process cannot be undone</h4>
                </div>       
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" 
                        id="deleteGalleryItemButton" 
                        data-imageGalleryItemId="0"
                        class="btn btn-primary">Remove gallery item and associated data</button>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("_LoaderModalPartial")

<script src="~/js/mvc-grid/mvc-grid.js"></script>
<script>
    var displayAsGrid = @Model.DisplayAsGrid.ToString().ToLower();

    document.addEventListener('DOMContentLoaded', function () {
        showLoader();

        // grid functions

        var gridElement;
        const gridOptions = {
        };
        var grid;

        function initialiseGrid(){
            gridElement = document.querySelector('.mvc-grid');
            grid = new MvcGrid(gridElement, gridOptions);
        }

        function reloadGrid(){
            new MvcGrid(document.querySelector('.mvc-grid')).reload();
            $("#editPanel").html("");
        }

        document.addEventListener("reloadend", e => {
            bindTooltips();
            bindButtons();
            scrollTo($("body"));
        });

        
        function setSelectedGridRow(galleryId){
            $(".edit-js").parent().parent().parent().removeClass('selected-grid-row');
            if (galleryId == 0) return;
            $(".edit-js[data-imagegalleryitemid=" + galleryId + "]").parent().parent().parent().addClass('selected-grid-row');
        }

        // set view functions

        $("#set-view-grid").on('click', function(){
                 showLoader();
           displayAsGrid = true;
            loadGalleryItemsGrid();
            $("#gallery-items-image-scroller-container").hide();
            $("#gallery-items-image-scroller-container").removeClass("d-flex");
            $("#gallery-items-grid-container").show();
            $("#gallery-items-grid-container").addClass("d-flex");
            $("#set-view-grid").hide();
            $("#set-view-grid").removeClass("d-inline");
            $("#set-view-slider").show();
            $("#set-view-slider").addClass("d-inline");
            $("#editPanel").html("");
        });

        $("#set-view-slider").on('click', function(){
                showLoader();
            displayAsGrid = false;
            loadGalleryItemsImageScroller();
            $("#gallery-items-image-scroller-container").show();
            $("#gallery-items-image-scroller-container").addClass("d-flex")
            $("#gallery-items-grid-container").hide();
            $("#gallery-items-grid-container").removeClass("d-flex")
            $("#set-view-grid").show();
            $("#set-view-grid").addClass("d-inline")
            $("#set-view-slider").hide();
            $("#set-view-slider").removeClass("d-inline")
            $("#editPanel").html("");
        });

        // load functions

        function loadEditPanel(galleryItemId, fileId, alertMessage){
            try {
                showLoader();
                alertClear();
                $("#editPanel").load(`MyImages?handler=EditGalleryItemPartial&galleryItemId=${galleryItemId}&fileId=${fileId}`, function (response, status, xhr){
                    console.log(`editPanel.load: status:${status}`);
                    if (status == "error"){
                        alertError(xhr.status + ": " + xhr.statusText);
                        setTimeout(showLoader(false), 1000);
                        $("#addOrEdit").removeAttr("disabled");
                    } 
                    if (status == "success"){
                        try {
                            if (alertMessage) {
                                alertSuccess(alertMessage);
                            }else{
                                alertClear();
                            }
                            $("#gallery-select-container-js").prepend($("#SelectedGallery").clone().removeClass("d-none"));
                            $("#paper-selects-container-js").replaceWith($("#paper-selectors").clone().removeClass("d-none"));
                            $("#SelectedPaperSurface option").each(function() { this.selected = (this.text == $("#PaperSurface").val()); });
                            $("#SelectedPaperTexture option").each(function() { this.selected = (this.text == $("#PaperTexture").val()); });
                            initialiseValidation();
                            addIntegerControls();
                            $("#addOrEdit").removeAttr("disabled");
                            $("#itemForm").valid();
                            $(".alert-close-js").on('click', alertClear);
                            $("#addOrEdit").on('click', function(e){
                                e.preventDefault();
                                onSubmit();
                            });
                            $("#add-to-gallery").unbind().on('mouseup', function(){
                                const galleryId = $("#SelectedGallery").val().trim();
                                const galleryItemId = $(this).attr('data-imageGalleryItemId');
                                addToGallery(galleryItemId, galleryId);
                            });
                            bindTooltips();
                            bindImageTags();
                            bindGalleryChips($("#Id").val());
                            addHeigthChangeEventHandlers();
                            addWidthChangeEventHandlers();
                            $('[data-toggle="hover"]').unbind().popover(({ trigger: "hover" }));
                            if (displayAsGrid) setSelectedGridRow(galleryItemId);
                                showLoader(false);
                            setTimeout(function(){
                                showLoader(false);
                            }, 250);
                            setTimeout(function(){
                                showLoader(false);
                            }, 500);
                            scrollTo($("#editPanel"));
                        }
                        catch(e) {
                            alertError(`Error from loadEditPanel.success: ${e.name} : ${e.description} : ${e.message}`)
                        }
                        finally {
                            showLoader(false);
                        }
                    } 
                });
            }
            catch(e) {
                alertError(`Error from loadEditPanel: ${e.name} : ${e.description} : ${e.message}` );
            }
            finally {
                showLoader(false);
            }
        }

        function loadGalleryItemsImageScroller(){
            try {
                $("#gallery-items-image-scroller-container").load(`MyImages?handler=GalleryItemsImageScroller`, function (response, status, xhr){
                    console.log(`loadGalleryItemsImageScroller: status:${status}`);
                    if (status == "error"){
                            alertError(`Error from loadGalleryItemsImageScroller.error: ${response}`)
                    } 
                    if (status == "success"){
                        try {
                            bindButtons();
                            initialiseImageScroller($("#content-scroller"));
                            showLoader(false);
                            setTimeout(function(){
                                showLoader(false);
                            }, 250);
                            scrollTo($("body"));
                        }
                        catch(e) {
                            alertError(`Error from loadGalleryItemsImageScroller.success: ${e.name} : ${e.description} : ${e.message}`)
                        }
                        finally {
                        }
                    } 
                });
            }
            catch(e) {
                alertError(`Error from loadGalleryItemsImageScroller: ${e.name} : ${e.description} : ${e.message}` );
            }
            finally {
                    showLoader(false);
            }
        }

        function loadGalleryItemsGrid(){
            try {
                $("#gallery-items-grid-container").load(`MyImages?handler=GalleryItemsGrid`, function (response, status, xhr){
                    console.log(`loadGalleryItemsGrid: status:${status}`);
                    if (status == "error"){
                            alertError(`Error from loadGalleryItemsGrid.error: ${response}`)
                    } 
                    if (status == "success"){
                        try {
                            initialiseGrid();
                            bindTooltips();
                            bindButtons();
                                showLoader(false);
                            setTimeout(function(){
                                showLoader(false);
                            }, 250);
                            scrollTo($("body"));
                        }
                        catch(e) {
                            alertError(`Error from loadGalleryItemsGrid.success: ${e.name} : ${e.description} : ${e.message}`)
                        }
                        finally {
                        }
                    } 
                });
            }
            catch(e) {
                alertError(`Error from loadGalleryItemsGrid: ${e.name} : ${e.description} : ${e.message}` );
            }
            finally {
                    showLoader(false);
            }
        }

        function bindButtons(){
            $(".edit-js").on('mouseup', function(){
                const galleryItemId = $(this).attr('data-imageGalleryItemId');
                const fileId = $(this).attr('data-imageFileId');
                loadEditPanel(galleryItemId, fileId);
            });
            $(".delete-js").on('mouseup', function(){
                const galleryItemId = $(this).attr('data-imageGalleryItemId');
                $("#deleteGalleryItemButton").attr('data-imageGalleryItemId', galleryItemId)
                loadConfirmModal();
            });
        }

        // delete functions

        function loadConfirmModal(){
            $('#confirmModal').modal('show');
        }

        $('#deleteGalleryItemButton').click(async function (e) {
            e.preventDefault();
            $('#confirmModal').modal('hide');
            const galleryItemId = $(this).attr('data-imageGalleryItemId');
            deleteGalleryItem(galleryItemId);
            reloadGrid();
        });

        function deleteGalleryItem(galleryItemId){
            let url = `MyImages?handler=DeleteGalleryItem&galleryItemId=${galleryItemId}`;
            $.ajax({
                url: url,
                type: 'POST',
                headers: {
                    "XSRF-TOKEN": $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                contentType: false,
                processData: false,
                success: function (response) {
                    $("#editPanel").html("");
                    reloadGrid();
                    alertSuccess("Your gallery item has been deleted");
                },
                error: function (response, status, error) {
                    alertError(`deleteGalleryItem: ${response.responseText} : ${status} : ${error}`);
                }
            });        
        }

        // tag functions

        function createTag(galleryItemId, tag){
            let url = `MyImages?handler=CreateTag`;
            $.ajax({
                url: url,
                type: 'POST',
                headers: {
                    "XSRF-TOKEN": $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                data: JSON.stringify({ 
                    'galleryItemId': parseInt(galleryItemId), 
                    'tag': tag.trim()
                }),
                contentType: 'application/json',
                processData: false,
                success: function (response) {
                    loadImageTags(galleryItemId);
                    $("#Tags").val("");
                },
                error: function (response, status, error) {
                    alertError(`createTag: ${response.responseText} : ${status} : ${error}`);
                }
            });        
        }

        function deleteTag(tagId, imageGalleryItemId){
            let url = `MyImages?handler=DeleteTag&imageTagId=${tagId}`;
            $.ajax({
                url: url,
                type: 'POST',
                headers: {
                    "XSRF-TOKEN": $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                contentType: false,
                processData: false,
                success: function (response) {
                    loadImageTags(imageGalleryItemId);
                    $(`.image-tag-js[data-itemid=${tagId}]`).remove();
                },
                error: function (response, status, error) {
                    alertError(`createTag: ${response.responseText} : ${status} : ${error}`);
                }
            });  
        }

        function loadImageTags(galleryItemId){
            try {
                alertClear();
                $("#tag-area").load(`MyImages?handler=ImageTagsPartial&galleryItemId=${galleryItemId}`, function (response, status, xhr){
                    console.log(`tags.load: status:${status}`);
                    if (status == "error"){
                        alertError(`loadTag error: ${xhr.status} : ${xhr.statusText}`);
                    } 
                    if (status == "success"){
                        setTimeout(function(){
                            bindImageTags();
                        }, 500);
                    } 
                 });
            }
            catch(e) {
                alertError(`loadImageTags: ${e.name} : ${e.description} : ${e.message}`);
            }
        }

        function bindImageTags(){
            $(".image-tag-js i.close").unbind().on('mouseup', function(){
                const tagId = $(this).attr('data-itemid');
                const imageGalleryItemId = $(this).attr('data-imageGalleryItemId');
                deleteTag(tagId, imageGalleryItemId);
            });
            $("#create-image-tag").unbind().on('mouseup', function(){
                const tag = $("#Tags").val().trim();
                const imageGalleryItemId = $(this).attr('data-imageGalleryItemId');
                createTag(imageGalleryItemId, tag);
            });
        }

        // size change functions

        function addHeigthChangeEventHandlers(){
            $('#MinHeight, #MaxHeight').on('keyup change input', function(){
                heightChange($(this));
            });
        }

        function addWidthChangeEventHandlers(){
            $('#MinWidth, #MaxWidth').on('keyup change input', function(){
                widthChange($(this));
            });
        }

        function heightChange(element){
            try {
                let newWidth = Math.round(Math.round(element.val()) * (1 /getLoadedPictureAspectRatio()));
                $("#MinWidth").unbind();
                $("#MaxWidth").unbind();
                if(element.attr('id') == "MinHeight"){
                    $("#MinWidth").val(newWidth);
                } else {
                    $("#MaxWidth").val(newWidth);
                }
                addWidthChangeEventHandlers();
                console.log(`height change: newWidth: ${newWidth}`);
            }
            catch(e) {
                alertError(`heightChange: ${e.name} : ${e.description} : ${e.message}`);
            }
        }

        function widthChange(element){
            try {
                let newHeight = Math.round(Math.round(element.val()) * getLoadedPictureAspectRatio());
                $("#MinHeight").unbind();
                $("#MaxHeight").unbind();
                if(element.attr('id') == "MinWidth"){
                    $("#MinHeight").val(newWidth);
                } else {
                    $("#MaxHeight").val(newWidth);
                }
                addHeigthChangeEventHandlers();
                console.log(`width change: newHeight: ${newHeight}`);
            }
            catch(e) {
                alertError(`widthChange: ${e.name} : ${e.description} : ${e.message}`);
            }
        }

        function getLoadedPictureAspectRatio(){
            try {
                let aspect = $("#ImageFileHeight").val() / $("#ImageFileWidth").val();
                return aspect;
            }
            catch(e) {
                alertError(`getLoadedPictureAspectRatio: ${e.name} : ${e.description} : ${e.message}`);
            }
        }

        // Gallery chip functions

        function addToGallery(galleryItemId, galleryId){
            let url = `MyImages?handler=AddToGallery`;
            $.ajax({
                url: url,
                type: 'POST',
                headers: {
                    "XSRF-TOKEN": $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                data: JSON.stringify({ 
                    'galleryItemId': parseInt(galleryItemId), 
                    'galleryId': parseInt(galleryId)
                }),
                contentType: 'application/json',
                processData: false,
                success: function (response) {
                    loadGalleryChips(galleryItemId);
                },
                error: function (response, status, error) {
                    alertError(`addToGallery: ${response.responseText} : ${status} : ${error}`);
                }
            });        
        }

        function removeFromGallery(galleryId, galleryItemId){
            let url = `MyImages?handler=RemoveFromGallery`;
            $.ajax({
                url: url,
                type: 'POST',
                headers: {
                    "XSRF-TOKEN": $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                data: JSON.stringify({ 
                    'galleryItemId': parseInt(galleryItemId), 
                    'galleryId': parseInt(galleryId)
                }),
                contentType: 'application/json',
                processData: false,
                success: function (response) {
                    loadGalleryChips(galleryItemId);
                    $(`.image-GalleryChip-js[data-itemid=${galleryId}]`).remove();
                },
                error: function (response, status, error) {
                    alertError(`removeFromGallery: ${response.responseText} : ${status} : ${error}`);
                }
            });  
        }

        function loadGalleryChips(galleryItemId){
            try {
                alertClear();
                $("#galleries-area").load(`MyImages?handler=GalleryChipsPartial&galleryItemId=${galleryItemId}`, function (response, status, xhr){
                    console.log(`loadGalleryChips: status:${status}`);
                    if (status == "error"){
                        alertError(`loadGalleryChips error: ${xhr.status} : ${xhr.statusText}`);
                    } 
                    if (status == "success"){
                        setTimeout(function(){
                            bindGalleryChips(galleryItemId);
                        }, 500);
                    } 
                 });
            }
            catch(e) {
                alertError(`loadImageGalleryChips: ${e.name} : ${e.description} : ${e.message}`);
            }
        }

        function bindGalleryChips(galleryItemId){
            $(".gallery-chip-js i.close").unbind().on('mouseup', function(){
                const _galleryItemId = galleryItemId;
                const galleryId = $(this).attr('data-itemid');
                removeFromGallery(galleryId, _galleryItemId);
            });
        }

        // form functions

        function onSubmit(){
            alertClear();
            if ($("#itemForm").valid()){
                showLoader();
                const alertMessage = $("#Id").val() == 0 ? "Gallery item created" : "Gallery item saved";
                $("#addOrEdit").attr("disabled", "disabled");
                let url = 'MyImages?handler=SaveGalleryItem';
                $.ajax({
                    url: url,
                    type: 'POST',
                    headers: {
                        "XSRF-TOKEN": $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    data: new FormData(document.getElementById("itemForm")),
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        let galleryItem = JSON.parse(response);
                        let galleryItemId = galleryItem.Id;
                        let fileId = galleryItem.ImageFileId;
                        loadEditPanel(galleryItemId, fileId, alertMessage);
                        if (alertMessage == "Gallery item created") {
                            if (displayAsGrid){
                                loadGalleryItemsGrid();
                            } else {
                                loadGalleryItemsImageScroller();
                            }
                        }
                        showLoader(false);
                    },
                    error: function (response, status, error) {
                        $("#addOrEdit").removeAttr("disabled");
                        alertError(`${response.responseText}`);
                        showLoader(false);
                    }
                });
            }
        };
        
        // initialisation

        alertClear();
        setTimeout(bindButtons, 1000);
        $(".alert-close-js").on('click', alertClear);

        $("body").on('change input', function(){
            validateForm();
        })
        $("body").on('mouseup', 'select, a', function(){
            validateForm();
        })
        $("body").on('mouseup', 'button', function(){
            validateForm();
        })  

        document.addEventListener("reloadstart", e => {
            $('.mvc-grid').fadeOut();
            $('.grid-loading').fadeIn();
        });

        document.addEventListener("reloadend", e => {
            $('.mvc-grid').fadeIn();
            $('.grid-loading').fadeOut('fast');
            bindButtons();
        });
        if (displayAsGrid){
            loadGalleryItemsGrid();
        } else {
            loadGalleryItemsImageScroller();
        }
    });

    // UI

    const validationOptions = {
        ignore: "",
        errorClass: "error"
    };

    function initialiseImageScroller(element) {
        $(".image-scroller-name").each(function(){
            var imageWidth = $(this).parent().parent().children().first().children().first().width();
            $(this).css('max-width', imageWidth);
        });
        $(".image-scroller-nav").hide();
    }

    function validateForm(){
        if ($("#itemForm").length > 0 && $("#itemForm").validator){
            setTimeout(function(){
                $("#itemForm").valid();
            }, 250)
        }
    }

    function setSelectedGridRow(galleryId){
        $(".edit-js").parent().parent().parent().removeClass('selected-grid-row');
        $(".edit-js[data-imagegalleryitemid=" + galleryId + "]").parent().parent().parent().addClass('selected-grid-row');
    }

    function initialiseValidation(){
        $("#itemForm").removeData("validator");
        $("#itemForm").validate(validationOptions);
        $.validator.unobtrusive.parse(document);
    }

    function addIntegerControls(){
        $(".integer-control-js").on('mouseup blur change input', function(){
            $(this).val(roundToInteger($(this).val()));
        });
        $(".integer-control-js").each(function(){
            $(this).val(roundToInteger($(this).val()));
        })
    }

    function roundToInteger(input){
        return Math.round(input); 
    }

    function scrollTo(element) {
        var position = element.offset().top
            - $(".container").offset().top 
            + $(".container").scrollTop();            
        $("html, body").animate({ scrollTop: position - 50 }, 1000);
    }
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}