@page
@model BrPo.Website.Areas.Printing.Pages.OrderModel

<style>
    .thumbnail{
        max-height: 100px !important;
    }
    .table-sm{
        font-size: 0.8em !important;
    }
    th, td {
        padding: 0.1rem 0.3rem 0 0 !important; 
    }
    #displayPanel {
        width: 100%;
        height: 100%;
    }
    #displayPanelImage {
        position: relative;
        background-color: #fff;
    }
    #sofaImage {
        position: absolute;
        bottom: 5%;
    }
    #personImage {
        position: absolute;
        bottom: 5%;
        padding-left: 50px;
    }
    #displayPanelRoom {
        background-color: rgba(0,0,0,.03);
        overflow: hidden;
    }
    #personImageContainer{
        height: 100%;
        position: relative;
    }
    #displayPanelImageRow{
        height: 100%;
    }
    #displayImageContainer {
        text-align: center; 
    }
    div.card-header a:hover,
    div.card-header a,
    a.collapsed:hover,
    a.collapsed { text-decoration: none; }
    .orderBbutton {
        font-size: 1.5em;
    }
    .headerLabel {
        color: #212529;
        margin-left: 5px;
    }
    #bg-controls{
        position: relative;
        margin-left: auto !important;
        margin-right: auto !important;
        width: fit-content;
    }
</style>

<div class="container-fluid">
    @if (Model.Files.Count > 0) { 
        <form id="orderForm">
            @Html.AntiForgeryToken()
            <div class="row">
                <div class="col-sm12 col-md-6 col-lg-7" id="displayPanelContainer">
                    <div class="row">
                        <div id="displayPanel">@await Html.PartialAsync("OrderDisplayPanelPartial", @Model.SelectedFile)</div>
                        @Html.HiddenFor(m => Model.SelectedPicturePixelHeight, new { id = "Model.SelectedPicturePixelHeight"})
                        @Html.HiddenFor(m => Model.SelectedPicturePixelWidth, new { id = "Model.SelectedPicturePixelWidth"})
                    </div>
                    <div class="row">
                        <div id="bg-controls" class="border rounded white-bg p-0 mt-2">
                            <div class="form-check form-check-inline ml-2">
                                <h5>Background:</h5>
                            </div>
                            <div class="form-check form-check-inline" data-toggle="tooltip" title="Scale display to an image of a sofa - the man is 1.8m wide">
                               <input class="form-check-input bg-type-js" 
                                      type="radio" 
                                      name="bgRadio" 
                                      id="bgRadio-sofa"                           
                                      value="sofa"                           
                                      checked>
                               <label class="form-check-label" for="bgRadio-sofa">
                               Sofa
                               </label>
                            </div>
                            <div class="form-check form-check-inline" data-toggle="tooltip" title="Scale display to an image of a man - the man is 1.8m tall">
                               <input class="form-check-input bg-type-js" 
                                      type="radio" 
                                      name="bgRadio" 
                                      id="bgRadio-man" 
                                      value="man">
                               <label class="form-check-label" for="bgRadio-man">
                               Man
                               </label>
                            </div>
                            <div class="form-check form-check-inline" data-toggle="tooltip" title="fit picture to display window">
                               <input class="form-check-input bg-type-js" 
                                      type="radio" 
                                      name="bgRadio" 
                                      id="bgRadio-plain"                          
                                      value="plain">
                               <label class="form-check-label" for="bgRadio-plain">
                               Plain
                               </label>
                            </div>
                            <div class="form-check form-check-inline">
                                <div id="bg-colour" class="input-group">
                                    <input type="hidden" class="form-control input-lg" value="#F0F0F0"/>
                                    <h5 class="mt-2 colorpicker-input-addon" style="top: 7px;">
                                        <i class="border rounded" 
                                           data-toggle="tooltip" 
                                           title="Set the background colour of the display window">
                                       </i>
                                    </h5>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-12 col-md-6 col-lg-5">
                    @Html.ValidationSummary(true)
                    <!--Accordion wrapper-->
                    <div class="accordion md-accordion" id="accordionEx" role="tablist" aria-multiselectable="true">

                        <!-- Files card -->
                        <div class="card">
                            <!-- Card header -->
                            <div class="card-header" role="tab" id="headingOne1">
                                <a data-toggle="collapse" data-parent="#accordionEx" href="#collapseOne1" aria-expanded="false" class="collapsed"
                                aria-controls="collapseOne1">
                                    <h5 class="mb-0">
                                        File: <span id="fileHeader" class="headerLabel">@Model.SelectedFile.OriginalFileName</span> <span class="headerIcon"><i class="fas fa-angle-down rotate-icon float-right"></i></span>
                                    </h5>
                                </a>
                            </div>
                            <!-- Card body -->
                            <div id="collapseOne1" class="collapse" role="tabpanel" aria-labelledby="headingOne1"
                                data-parent="#accordionEx">
                                <div class="card-body" id="fileBody">
                                    @await Html.PartialAsync("OrderFilesPartial", @Model.Files)
                                    <input type="hidden" id="selectedFileId" name="selectedFileId" value="@Model.SelectedFile.Id"/>                            
                                </div>
                            </div>
                        </div><!-- Files card -->

                        <!-- Size card -->
                        <div class="card">
                            <!-- Card header -->
                            <div class="card-header" role="tab" id="headingTwo2">
                                <a data-toggle="collapse" data-parent="#accordionEx" href="#collapseTwo2" aria-expanded="true"
                                aria-controls="collapseTwo2">
                                    <h5 class="mb-0">
                                        Size: <span class="headerLabel" data-toggle="tooltip" title="Print size in mm : height * width">
                                                  <span id="sizeHeaderHeight"></span> (h) * <span id="sizeHeaderWidth"> </span> (w) mm
                                              </span>
                                              <span class="headerIcon"><i class="fas fa-angle-down rotate-icon float-right"></i></span>
                                    </h5>
                                </a>
                            </div>
                            <!-- Card body -->
                            <div id="collapseTwo2" class="collapse show" role="tabpanel" aria-labelledby="headingTwo2"
                                data-parent="#accordionEx">
                                <div class="card-body" id="sizeBody">
                                    @await Html.PartialAsync("OrderSizePartial")
                                </div>
                            </div>
                        </div><!-- Size card -->

                        <!-- Paper card -->
                        <div class="card">
                            <!-- Card header -->
                            <div class="card-header" role="tab" id="headingThree3">
                                <a data-toggle="collapse" data-parent="#accordionEx" href="#collapseThree3" aria-expanded="false" class="collapsed"
                                aria-controls="collapseThree3">
                                    <h5 class="mb-0">
                                        Paper: <span id="paperHeader" class="headerLabel"></span> <span class="headerIcon"><i class="fas fa-angle-down rotate-icon float-right"></i></span>
                                    </h5>
                                </a>
                            </div>
                            <!-- Card body -->
                            <div id="collapseThree3" class="collapse" role="tabpanel" aria-labelledby="headingThree3"
                                data-parent="#accordionEx">
                                <div class="card-body" id="sizeBody">
                                    @Html.DropDownListFor(m => Model.SelectedPaperId, new SelectList(Model.Papers, "Id", "Name"), htmlAttributes: new { @class = "form-control", id = "SelectedPaper"})
                                    @Html.HiddenFor(m => Model.SelectedPaperId, new { name = "SelectedPaperId", id = "Model.SelectedPaperId"})
                                </div>
                            </div>
                        </div><!-- Paper card -->

                        <!-- Border card -->
                        <div class="card">
                            <!-- Card header -->
                            <div class="card-header" role="tab" id="headingFour4">
                                <a data-toggle="collapse" data-parent="#accordionEx" href="#collapseFour4" aria-expanded="false" class="collapsed"
                                aria-controls="collapseFour4">
                                    <h5 class="mb-0">
                                        Border: <span class="headerLabel"><span id="borderHeader" class="headerLabel"></span> mm</span>
                                        <span class="headerIcon"><i class="fas fa-angle-down rotate-icon float-right"></i></span>
                                    </h5>
                                </a>
                            </div>
                            <!-- Card body -->
                            <div id="collapseFour4" class="collapse" role="tabpanel" aria-labelledby="headingFour4"
                                data-parent="#accordionEx">
                                <div class="card-body" id="sizeBody">
                                    @await Html.PartialAsync("OrderBorderPartial")
                                </div>
                            </div>
                        </div><!-- Border card -->

                        <!-- Quality card -->
                        <div class="card">
                            <!-- Card header -->
                            <div class="card-header" role="tab" id="headingFive5">
                                <a data-toggle="collapse" data-parent="#accordionEx" href="#collapseFive5" aria-expanded="false" class="collapsed"
                                aria-controls="collapseFive5">
                                    <h5 class="mb-0">
                                        Quality: <span id="qualityHeader" class="headerLabel">@Model.SelectedQuality</span> <span class="headerIcon"><i class="fas fa-angle-down rotate-icon float-right"></i></span>
                                    </h5>
                                </a>
                            </div>
                            <!-- Card body -->
                            <div id="collapseFive5" class="collapse" role="tabpanel" aria-labelledby="headingFive5"
                                data-parent="#accordionEx">
                                <div class="card-body" id="qualityBody">
                                    @foreach (var quality in Model.Qualities)
                                    {
                                        var selected = quality.Equals(Model.SelectedQuality) ? "checked=\"checked\"" : string.Empty;
                                        var label = quality == "Premium" 
                                            ? " - 11 inks - available on paper sizes A4 and larger"
                                            : " - 6 inks - available on paper sizes up to A4";
                                        <div class="form-check">
                                            <input  class="form-check-input quality-js"
                                                    type="radio" 
                                                    asp-for="SelectedQuality" 
                                                    name="SelectedQuality" 
                                                    value="@quality" @selected/><span class="font-weight-bold">@quality</span> @label<br />
                                        </div>
                                    }
                                    <div class="form-group checkbox mb-0">
                                        @Html.CheckBoxFor(model => model.IsDraftPrint) 
                                        <label class="" for="IsDraftPrint"><span class="font-weight-bold ml-1">Draft</span> - a reduced price, water-marked draft print</label>
                                    </div>
                                </div>
                            </div>
                        </div><!-- Quality card -->

                        <!-- Order card -->
                        <div class="card">
                            <!-- Card header -->
                            <div class="card-header" role="tab" id="headingSix6">
                                <a data-toggle="collapse" @*data-parent="#accordionEx"*@ href="" aria-expanded="true" 
                                aria-controls="collapseSix6">
                                    <h5 class="mb-0">
                                        Order: <span id="orderHeader" class="headerLabel"></span> 
                                        @*<span class="headerIcon"><i class="fas fa-angle-down rotate-icon float-right"></i></span>*@
                                    </h5>
                                </a>
                            </div>
                            <!-- Card body -->
                            <div id="collapseSix6" class="show" role="tabpanel" aria-labelledby="headingSix6"
                                @*data-parent="#accordionEx"*@>
                                <input type="hidden" name="orderValue" id="orderValue" />
                                <div class="card-body" id="sizeBody">
                                    <div class="form-group row mb-3">
                                        <label for="height" class="w-33 ml-3 col-form-label">Quantity</label>
                                        <div class="w-33">
                                            <input type="number" step="1"
                                                class="form-control integer-control-js" 
                                                id="Quantity" 
                                                placeholder="quantity" 
                                                name="Quantity" 
                                                data-val="true"
                                                data-val-number="The Quantity field must be an integer between 1 and 500." 
                                                min="1" 
                                                max="500" 
                                                data-toggle="tooltip" title="Enter the number of prints required"
                                                value="@Model.Quantity" />
                                        </div>
                                        <div class="w-30">
                                            <div class="text mt-2 ml-2" id="pricePerPrint"></div>
                                        </div>
                                    </div>
                                    <div class="field-validation-valid row ml-1" data-valmsg-for="Quantity" data-valmsg-replace="true"></div>
                                    <button class="btn btn-primary btn-lg btn-block" 
                                            id="orderButton"
                                            @*data-toggle="modal" 
                                            data-target="#confirmModal"*@> Order Print </button>
                                </div>
                            </div>
                        </div><!-- Order card -->

                    </div><!-- Accordion wrapper -->
                </div>
            </div>
        </form>
    }
    else {
        <h3 style="margin:auto;">You need to <a href="/Printing/Upload">Upload</a> some files before you can order prints</h3>
    }
</div>

<!-- Confirm order Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" role="dialog" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content p-3">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Confirm your Print Order</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <h4 class="ml-3">Your file:</h4>
                </div>
                <div id="confirmFile" class="mb-2"></div>
                <div class="row">
                    <h4 class="ml-3">Your order details:</h4>
                </div>
                <div class="row">
                    <div class="col">
                        <h6>Height</h6>
                    </div>
                    <div class="col">
                        <span id="confirmHeight"></span>
                    </div>
                </div>            
                <div class="row">
                    <div class="col">
                        <h6>Width</h6>
                    </div>
                    <div class="col">
                        <span id="confirmWidth"></span>
                    </div>
                </div>   
                <div class="row">
                    <div class="col">
                        <h6>Paper</h6>
                    </div>
                    <div class="col">
                        <span id="confirmPaper"></span>
                    </div>
                </div>            
                <div class="row">
                    <div class="col">
                        <h6>Border</h6>
                    </div>
                    <div class="col">
                        <span id="confirmBorder"></span>
                    </div>
                </div>  
                <div class="row">
                    <div class="col">
                        <h6>Quality</h6>
                    </div>
                    <div class="col">
                        <span id="confirmQuality"></span>
                    </div>
                </div>            
                <div class="row">
                    <div class="col">
                        <h6>Price per print</h6>
                    </div>
                    <div class="col">
                        <span id="confirmPricePerPrint"></span>
                    </div>
                </div>  
                <div class="row">
                    <div class="col">
                        <h6>Quantity</h6>
                    </div>
                    <div class="col">
                        <span id="confirmQuantity"></span>
                    </div>
                </div>            
                <div class="row">
                    <div class="col">
                        <h6>Order value</h6>
                    </div>
                    <div class="col">
                        <span id="confirmOrderValue"></span>
                    </div>
                </div>            
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" id="confirmOrderButton" class="btn btn-primary">Add Print to Basket</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        $("#main_layout_container").removeClass("container").addClass("container-fluid");

        // Load picture functions

        $("body").on('mousedown', '.thumbnail', function () {
            // show loading modal over display room
            loadDisplayPanel(
                $(this).attr("data-id"), 
                $(this).attr("data-fileName"),
                $(this).attr("data-pixel-height"),
                $(this).attr("data-pixel-width") 
            );
        });

        function loadDisplayPanel(id, fileName, pixelHeight, pixelWidth){
            try {
                $("#displayPanel").load(`Order?handler=OrderDisplayPanelPartial&id=${id}`, function(){
                    $("#fileHeader").html(fileName);
                    $("input[name=SelectedPicturePixelHeight]").val(pixelHeight);
                    $("input[name=SelectedPicturePixelWidth]").val(pixelWidth);
                    $("#selectedFileId").val(id);
                    setTimeout(processPanelLoad(), 1000);
                });
            }
            catch(e) {
                console.log(`Error from loadDisplayPanel: ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function getLoadedPictureAspectRatio(){
            try {
                let aspect = $("input[name=SelectedPicturePixelHeight]").val() / $("input[name=SelectedPicturePixelWidth]").val();
                return aspect;
            }
            catch(e) {
                console.log(`Error from getLoadedPictureAspectRatio : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function processPanelLoad(){
            try {
                let height = $("input[name=SelectedPicturePixelHeight]").val();
                let width = $("input[name=SelectedPicturePixelWidth]").val();
                if (height > width){
                    if ($("#height").val() < $("#width").val())
                        swapHeightAndWidth();
                }else{
                    if ($("#height").val() > $("#width").val())
                        swapHeightAndWidth();
                }
                setPaperSizeLimits();
                setupDisplayPanel()
            }
            catch(e) {
                console.log(`Error from processPanelLoad : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function setupDisplayPanel(){
            try {
                if ($(window).width() < 768){
                    $("#displayPanelRoom").css('width', $("#displayPanelContainer").width() + 'px !important');
                    $("#displayPanelRoom").css('left', '0px');;
                    $("#displayPanelRoom").height($("#displayPanelRoom").width());
                    $("#accordionEx").addClass("mt-2");
                } else {
                    $("#displayPanelRoom").width($("#displayPanelContainer").width() - 30);
                    $("#displayPanelRoom").css('left', '');
                    let newHeight = $(this).height() - $("header").height() - $("footer").height() - 165;
                    if (newHeight > $("#displayPanel").width()){
                        newHeight = $("#displayPanelRoom").width();
                    } 
                    $("#displayPanelRoom").height(newHeight);
                    $("#accordionEx").removeClass("mt-2");
                }
                setBackgroundImage();
                setPicturePosition();
                setTimeout(setPicturePosition, 100);
            }
            catch(e) {
                console.log(`Error from setupDisplayPanel : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function setBackgroundImage(){
            if (BackgroundType == 'sofa'){
                $("#personImage").hide();
                $("#sofaImage").show();
            } else if (BackgroundType == 'man'){
                $("#personImage").show();
                $("#sofaImage").hide();
            } else {
                $("#personImage").hide();
                $("#sofaImage").hide();
            }
            try {
                if ($("#displayPanelRoom").height() >= $("#displayPanelRoom").width() - 10){
                    $("#sofaImage").css("width", "90%");
                } else {
                    $("#sofaImage").css("width", "80%");
                }
                let sofaLeft = ($("#displayPanelImageRow").width() / 2) - ($("#sofaImage").width() / 2);
                $("#sofaImage").css('left', sofaLeft + 'px');
                $("#personImage").css("height", "90%");
            }
            catch(e) {
                console.log(`Error from setBackgroundImage : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function setPicturePosition(){
            try {
                setPictureHeight();
                let boxTop = getOffset( document.getElementById('displayImageContainer') ).top;
                let personOffset = ( $("#personImage").height() * .25);

                if (BackgroundType == 'sofa'){
                    let pictureTop = boxTop + personOffset - ($("#displayPanelImage").height() / 2);
                    $("#displayPanelImage").css('top', pictureTop + 'px');
                    let left = ($("#displayPanelImageRow").width() / 2) - ($("#displayPanelImage").width() / 2) - 20;
                    $("#displayPanelImage").css('left', left + 'px');
                } else if (BackgroundType == 'man'){
                    let pictureTop = ($("#displayPanelImageRow").height() / 2) - ($("#displayPanelImage").height() / 2);
                    $("#displayPanelImage").css('top', pictureTop + 'px');
                    let left = ( ( ( $("#displayPanelImageRow").width() - ($("#personImage").width() + 50)) / 2) - ($("#displayPanelImage").width() / 2) + ($("#personImage").width() + 50));
                    $("#displayPanelImage").css('left', left + 'px');
                } else {
                    let pictureTop = boxTop + (($("#displayPanelRoom").height() - $("#displayPanelImage").height()) / 2);
                    $("#displayPanelImage").css('top', pictureTop + 'px');
                    let left = (($("#displayPanelImageRow").width() - $("#displayPanelImage").width()) / 2) - 20;
                    $("#displayPanelImage").css('left', left + 'px');
                }
                getPrice();
            }
            catch(e) {
                console.log(`Error from setPicturePosition : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function setPictureHeight(){
            try {
                if (BackgroundType == 'sofa'){
                    let oneMm = $("#sofaImage").width() / 1800;
                    let newHeight = $("#height").val() * oneMm;
                    $("#displayPanelImage").css('height', newHeight + 'px');
                } else if (BackgroundType == 'man'){
                    let oneMm = $("#personImage").height() / 1800;
                    let newHeight = $("#height").val() * oneMm;
                    $("#displayPanelImage").css('height', newHeight + 'px');
                } else {
                    fitPictureToWindow();
                }
                setBorderDisplay();
            }
            catch(e) {
                console.log(`Error from setPictureHeight : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function fitPictureToWindow(){
            let oneMm = ($("#displayPanelRoom").height() - 150) / $("#height").val();
            let newHeight = $("#height").val() * oneMm;
            $("#displayPanelImage").css('height', newHeight + 'px');
        }

        // background controls

        function bindBackgroundControls(){
            $('input[type="radio"].bg-type-js').click(function(){
    	        BackgroundType = $(this).val();      
                setupDisplayPanel();
            });
        }

        $(function () {
            var n = 0;
            $('#bg-colour').colorpicker({
                debug: false,
                extensions: [
                    {
                        name: 'swatches', 
                        options: { 
                        colors: {
                            'black': '#000000',
                            'dark gray': '#888888',
                            'gray': '#CCCCCC',
                            'light gray': '#F0F0F0',
                            'white': '#ffffff',
                            'taup': '#CAC4BE',
                            'blue is the colour': '#034694'
                        },
                        namesAsValues: true
                        }
                    }
                ]
            })
            .on('colorpickerDebug', function (e) {
                console.log(n + ': ' + e.debug.eventName + '');
            })
            .on('colorpickerChange ', function (e) {
                $("#displayPanelRoom").css('background', e.color.toString());
            });        
        });

        // paper functions

        $("#SelectedPaper").on('change', function(e){
            let optionSelected = $("option:selected", this);
            let valueSelected = this.value;
            $("input[name=SelectedPaperId]").val(valueSelected);
            getSelectedPaper();
        });

        function getSelectedPaper(){
            try {
                $.ajax({
                    url: 'Order?handler=Paper&id=' + $("input[name=SelectedPaperId]").val(),
                    success: function(paperModel){   
                        PaperModel = paperModel;
                        $("#paperHeader").html(paperModel["Name"]);
                        setPaperSizeLimits();
                        if (paperModel["Name"].includes("A4")){
                            $("#qualityBody").find('input.quality-js').eq(1).prop("disabled", false);
                        }else{
                            $("#qualityBody").find('input.quality-js').eq(1).prop("disabled", true);
                            $("#qualityBody").find('input.quality-js').eq(0).prop("checked", true);
                        }
                        getPrice();
                    },
                    error: function(data){
                        console.log(`getSelectedPaper: paperId: ${$("input[name=SelectedPaperId]").val()}, status: ${data.status}, description: ${data.statusText}`);
                    }
                });    
            }
            catch(e) {
                console.log(`Error from getSelectedPaper : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function setPaperSizeLimits(){
            try {
                if (PaperModel == null) return;
                let orientation = $("input[name=SelectedPicturePixelHeight]").val() > $("input[name=SelectedPicturePixelWidth]").val() ? 'portrait' : 'landscape';
                let paperHeight = PaperModel.RollPaper ? 5000 : PaperModel.CutSheetHeight;
                let paperWidth = PaperModel.RollPaper ? PaperModel.RollWidth : PaperModel.CutSheetWidth;
                if (orientation == 'portrait'){
                    $("#height").attr({
                        'max': paperHeight,
                        'title': `For the selected paper the Height field must be between 100 and ${paperHeight}`
                    });
                    $("#width").attr({
                        'max': paperWidth,
                        'title': `For the selected paper the Width field must be between 100 and ${paperHeight}`
                    });
                    $( "#height" ).rules( "remove", "max" );
                    $( "#width" ).rules( "remove", "max" );
                    $( "#height" ).rules( "add", {
                        max: paperHeight,
                        messages: {
                            max: jQuery.validator.format("The Height field must be between 100 and {0}")
                        }
                    });
                    $( "#width" ).rules( "add", {
                        max: paperWidth,
                        messages: {
                            max: jQuery.validator.format("The Width field must be between 100 and {0}")
                        }
                    });
                    $("#paperHeader").attr('title', `Max dimensions: ${paperHeight} * ${paperWidth} mm`);
                } else {
                    $("#height").attr({
                        'max': paperWidth,
                        'title': `For the selected paper the Height field must be between 100 and ${paperWidth}`
                    });
                    $("#width").attr({
                        'max': paperHeight,
                        'title': `For the selected paper the Width field must be between 100 and ${paperHeight}`
                    });
                    $( "#height" ).rules( "remove", "max" );
                    $( "#width" ).rules( "remove", "max" );
                    $( "#height" ).rules( "add", {
                        max: paperWidth,
                        messages: {
                            max: jQuery.validator.format("The Height field must be between 100 and {0}")
                        }
                    });
                    $( "#width" ).rules( "add", {
                        max: paperHeight,
                        messages: {
                            max: jQuery.validator.format("The Width field must be between 100 and {0}")
                        }
                    });
                    $("#paperHeader").attr('title', `Max dimensions: ${paperWidth} * ${paperHeight} mm`);
                }
                $("#height").tooltip('dispose');
                $("#width").tooltip('dispose');
                $("#height").tooltip({
                    delay: {show: 400, hide: 300}
                }).click(function () {
                    $('[data-toggle="tooltip"]').tooltip("hide");
                });
                $("#width").tooltip({
                    delay: {show: 400, hide: 300}
                }).click(function () {
                    $('[data-toggle="tooltip"]').tooltip("hide");
                });
                $.validator.unobtrusive.parse('form');
            }
            catch(e) {
                console.log(`Error from setPaperSizeLimits : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        // Size functions

        function fitToA4(){
            try {
                if ($("#displayPanelImage").height() > $("#displayPanelImage").width()){
                    $("#height").val("297");
                    $("#width").val("210");
                }else{
                    $("#height").val("210");
                    $("#width").val("297");
                }
                heightChange();
                setPicturePosition();
                setSizeHeader();
            }
            catch(e) {
                console.log(`Error from fitToA4 : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function fitToA3(){
            try {
                if ($("#displayPanelImage").height() > $("#displayPanelImage").width()){
                    $("#height").val("420");
                    $("#width").val("297");
                }else{
                    $("#height").val("297");
                    $("#width").val("420");
                }
                heightChange();
                setPicturePosition();
                setSizeHeader();
            }
            catch(e) {
                console.log(`Error from fitToA3 : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function fitToA2(){
            try {
                if ($("#displayPanelImage").height() > $("#displayPanelImage").width()){
                    $("#height").val("594");
                    $("#width").val("420");
                }else{
                    $("#height").val("420");
                    $("#width").val("594");
                }
                heightChange();
                setPicturePosition();
                setSizeHeader();
            }
            catch(e) {
                console.log(`Error from fitToA2 : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function addHeigthChangeEventHandler(){
            $('#height').on('keyup change input', heightChange);
        }

        function addWidthChangeEventHandler(){
            $('#width').on('keyup change input', widthChange);
        }

        function heightChange(){
            try {
                let newWidth = Math.round((Math.round($("#height").val()) * (1 /getLoadedPictureAspectRatio())) * 10) / 10;
                $("#width").unbind();
                $("#width").val(newWidth);
                addWidthChangeEventHandler();
                //console.log(`#height change: newWidth: ${newWidth}`);
                setPicturePosition();
                setSizeHeader();
            }
            catch(e) {
                console.log(`Error from heightChange : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function widthChange(){
            try {
                let newHeight = Math.round((Math.round($("#width").val()) * getLoadedPictureAspectRatio()) * 10) / 10;
                $("#height").unbind();
                $("#height").val(newHeight);
                addHeigthChangeEventHandler();
                //console.log(`#width change: newHeight: ${newHeight}`);
                setPicturePosition();
                setSizeHeader();
            }
            catch(e) {
                console.log(`Error from widthChange : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function setSizeHeader(){
            $("#sizeHeaderHeight").html($("#height").val());
            $("#sizeHeaderWidth").html($("#width").val());
        }

        function swapHeightAndWidth(){
            try {
                let height = $("#height").val();
                let width = $("#width").val();
                $("#height").val(width);
                $("#width").val(height);
                setSizeHeader();
            }
            catch(e) {
                console.log(`Error from swapHeightAndWidth : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function fitPictureToPaperSize(){
            try {
                if (PaperModel == null) return;
                setPaperSizeLimits();
                let initialHeight = $("#height").val();
                let initialWidth = $("#width").val();
                let maxHeight = $("#height").attr('max');
                let maxWidth = $("#width").attr('max');
                if (initialHeight > maxHeight) {
                    $("#height").val(maxHeight);
                    heightChange();
                    if ($("#width").val() > maxWidth) {
                        $("#width").val(maxWidth);
                        widthChange();
                    }
                } else {
                    $("#height").val(maxHeight);
                    heightChange();
                    if ($("#width").val() < $("#height").val()) {
                        $("#width").val(maxWidth);
                        widthChange();
                    }
                }
                setSizeHeader();
            }
            catch(e) {
                console.log(`Error from fitPictureToPaperSize : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        // Border functions

        $("#border").on('keyup change input', function(){
            setBorderHeader();
            setBorderDisplay();
        });

        function setBorderDisplay(){
            try {
                let borderWidth = $("#border").val()
                if (borderWidth > 0){
                    $("#displayPanelImage").css('border', ".25px solid #ddd");
                    let oneMm = $("#displayPanelImage").height() / $("#height").val();
                    let borderWidthInPixels = (borderWidth * oneMm).toFixed(2);
                    $("#displayPanelImage").css('padding', borderWidthInPixels + "px");
                } else {
                    $("#displayPanelImage").css('border', "");
                    $("#displayPanelImage").css('padding', '0 px');
                }
            }
            catch(e) {
                console.log(`Error from setBorderDisplay : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function setBorderHeader(){
            $("#borderHeader").html($("#border").val());
        }

        // Quality functions
        
        $('input[type="radio"].quality-js').click(function(){
    	    let selectedQuality = $(this).val();
            if (selectedQuality == "High") {
                $("#IsDraftPrint").prop("checked", false);
                $("#IsDraftPrint").prop("disabled", true);
            } else {
                $("#IsDraftPrint").prop("disabled", false);
            }
            $("#qualityHeader").html(selectedQuality);
            getPrice(); 
        });
        
        $('#IsDraftPrint').click(function(){
            if(!$(this).is(":checked")){
                $("#qualityHeader").html($("#qualityHeader").html().replace(" - Draft", ""));
            } else {
                $("#qualityHeader").html($("#qualityHeader").html() + " - Draft");
            }
            getPrice(); 
        });

        $("#Quantity").on('change', function(e){
            getPrice(); 
            let buttonLabel = $("#Quantity").val() > 1 ? "Order Prints" : "Order Print";
            $("#orderButton").html(buttonLabel);
            buttonLabel = $("#Quantity").val() > 1 ? "Add Prints to Basket" : "Add Print to Basket";
            $("#confirmOrderButton").html(buttonLabel);
        });

        function roundToInteger(input){
            return Math.round(input); 
        }

        // Price functions

        function getPrice(){
            try {
                if (PaperModel == null) return;
                if (PaperModel.RollPaper == true){
                    let paperLength = $("#height").val() > $("#width").val() ? parseFloat($("#height").val()) + 100 : parseFloat($("#width").val()) + 100;     
                    let pricePerPrint = (paperLength / 1000) * PaperModel.CostPerMeter;
                    pricePerPrint = getQuantityDiscountPrice(pricePerPrint, $("#Quantity").val());
                    if ($("#IsDraftPrint").prop("checked") == true) 
                        pricePerPrint = pricePerPrint / 2;
                    $("#pricePerPrint").html("£ " + (Math.round(pricePerPrint * 100) / 100).toFixed(2) + ' each');
                    let orderValue = (Math.round((pricePerPrint * $("#Quantity").val()) * 100) / 100).toFixed(2);
                    $("#orderHeader").html("£ " + orderValue);
                    $("#orderValue").val(orderValue);
                } else {
                    pricePerPrint = getQuantityDiscountPrice(PaperModel.CostPerSheet, $("#Quantity").val());
                    if ($("#IsDraftPrint").prop("checked") == true) 
                        pricePerPrint = pricePerPrint / 2;
                    $("#pricePerPrint").html("£ " + (Math.round(pricePerPrint * 100) / 100).toFixed(2) + ' each');
                    let orderValue = (Math.round((pricePerPrint * $("#Quantity").val()) * 100) / 100).toFixed(2);
                    $("#orderHeader").html("£ " + orderValue);
                    $("#orderValue").val(orderValue);
                }
            }
            catch(e) {
                console.log(`Error from getPrice : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        function getQuantityDiscountPrice(pricePerPrint, quantity){
            try {
                let discount = 0;
                switch(true) {
                  case quantity == 1:
                    break;
                  case quantity <= 4:
                    discount = 5;
                    break;
                  case quantity <= 9:
                    discount = 10;
                    break;
                  case quantity <= 19:
                    discount = 15;
                    break;
                  case quantity <= 29:
                    discount = 20;
                    break;
                  case quantity <= 39:
                    discount = 25;
                    break;
                  case quantity >= 50:
                    discount = 30;
                    break;
                  default:
                }
                if (discount == 0) return pricePerPrint;
                return (((100 - discount) / 100) * pricePerPrint);
            }
            catch(e) {
                console.log(`Error from getQuantityDiscountPrice : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }

        // order functions

        $('#orderButton').click(function (e) {
            e.preventDefault();
            if ($("#height").valid() && $("#width").valid()){
                loadConfirmModal()
            } else {
                $('#collapseTwo2').collapse('show');  
            }
        });

        function loadConfirmModal(){
            $("#confirmFile").html("");
            $("div.fileRow-js[data-id=" + $("#selectedFileId").val() + "]").clone().appendTo("#confirmFile");
            $("#confirmHeight").html($("#height").val() + " mm");
            $("#confirmWidth").html($("#width").val() + " mm");
            $("#confirmPaper").html(PaperModel["Name"]);
            $("#confirmBorder").html($("#border").val() + " mm");
            $("#confirmQuality").html($("#qualityHeader").html());
            $("#confirmPricePerPrint").html($("#pricePerPrint").html());
            $("#confirmQuantity").html($("#Quantity").val());
            $("#confirmOrderValue").html($("#orderHeader").html());
            $('#confirmModal').modal('show');
        }

        $('#confirmOrderButton').click(function (e) {
            e.preventDefault();
            $('#confirmModal').modal('hide');
            addToBasket()
        });

        function addToBasket(){
            let url = 'Order?handler=OrderPrints';
            $.ajax({
                url: url,
                type: 'POST',
                headers: {
                    "XSRF-TOKEN": $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                data: new FormData(document.getElementById("orderForm")),
                contentType: false,
                processData: false,
                success: function (response) {
                    updateBasketCount();
                    //alert(`Success response from server:\n\n${response.responseText}`);
                },
                error: function (response, status, error) {
                    alert(`Error response from server:\n\n${response.responseText}\n\n${status}\n\n${error}`);
                }
            });
        }

        // initialisation

        $("#orderForm").validate({
            ignore: "",
            errorPlacement: function(error, element) {
                error.appendTo( element.parent("div").parent("div").next("div.field-validation-valid") );
            },
            errorClass: "error"
        });
        $("#sizeA4").on('click', fitToA4);
        $("#sizeA3").on('click', fitToA3);
        $("#sizeA2").on('click', fitToA2);  
        $("#maxSize").on('click', fitPictureToPaperSize);
        window.addEventListener('resize', setupDisplayPanel);
        $("#height").val("420");
        $("#width").val("594");
        $("#border").val("0");
        $(".integer-control-js").on('mouseup blur change input', function(){
            $(this).val(roundToInteger($(this).val()));
        });
        bindBackgroundControls();          
        PixelHeight = $("input[name=SelectedPicturePixelHeight]").val();
        PixelWidth = $("input[name=SelectedPicturePixelWidth]").val();
        setupDisplayPanel();
        getSelectedPaper();
        setBorderHeader();
        addWidthChangeEventHandler();
        heightChange();
        setSizeHeader();
        getPrice();
        setPaperSizeLimits();
        fitPictureToPaperSize();
        setTimeout(function(){
            fitPictureToPaperSize();
            setPaperSizeLimits();
        }, 250);
        setTimeout(addHeigthChangeEventHandler, 490);
        $("body").on('change input', function(){
            setTimeout(function(){
                $("#height").valid();
                $("#width").valid();
                $("#Quantity").valid();
                $("#border").valid();
           }, 250)
        })
        $("body").on('mouseup', 'select, a', function(){
            setTimeout(function(){
                $("#height").valid();
                $("#width").valid();
                $("#Quantity").valid();
                $("#border").valid();
           }, 250)
        })
        $("body").on('mouseup', 'button', function(){
            setTimeout(function(){
                $("#height").valid();
                $("#width").valid();
                $("#Quantity").valid();
                $("#border").valid();
            }, 250)
        })  
        setTimeout(function(){
            $("#height").focus();
            $("#width").focus();
            $("#height").focus();
            $("#height").blur();
        }, 300)
    });

    var PaperModel = null;
    var BackgroundType = 'sofa';

    function getOffset( el ) {
        try {
            let _x = 0;
            let _y = 0;
            while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
                  _x += el.offsetLeft - el.scrollLeft;
                  _y += el.offsetTop - el.scrollTop;
                  el = el.offsetParent;
            }
            return { top: _y, left: _x };
        }
        catch(e) {
            console.log(`Error from getOffset : ${e.name} :  : ${e.description} : ${e.message}` );
        }
    }

        function defaultFunctionBody(){
            try {

            }
            catch(e) {
                console.log(`Error from  : ${e.name} :  : ${e.description} : ${e.message}` );
            }
        }
</script>